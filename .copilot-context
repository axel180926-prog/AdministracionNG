## Contexto del Proyecto para Copilot

### üì± Descripci√≥n General
Sistema de administraci√≥n de negocios multi-modular que se adapta din√°micamente seg√∫n el tipo de negocio (Restaurante, Panader√≠a, Poller√≠a, Taquer√≠a, Carnicer√≠a, Helader√≠a, Tamalera, etc.).

### üéØ Caracter√≠sticas Principales
1. **M√≥dulos Din√°micos**: Cada negocio activa solo los m√≥dulos que necesita
2. **Sincronizaci√≥n en Tiempo Real**: Cambios en ajustes se reflejan inmediatamente
3. **Multi-negocios**: Datos 100% aislados por negocio
4. **Inventario Autom√°tico**: Las ventas actualizan stock autom√°ticamente
5. **Historial Completo**: Se registra todo cambio en inventory_movements

### üèóÔ∏è Stack Tecnol√≥gico
- **Backend**: Node.js 20 + Express + PostgreSQL
- **Frontend**: React Native + Expo + Context API
- **Autenticaci√≥n**: JWT (7 d√≠as de expiraci√≥n)
- **Despliegue**: VPS Hostinger con PM2 + Nginx

### üìÅ Estructura Principal
```
AdministracionNG/
‚îú‚îÄ‚îÄ backend/              # API REST
‚îÇ   ‚îú‚îÄ‚îÄ server.js        # Punto de entrada
‚îÇ   ‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ database/
‚îú‚îÄ‚îÄ frontend/            # React Native
‚îÇ   ‚îú‚îÄ‚îÄ App.js
‚îÇ   ‚îú‚îÄ‚îÄ contexts/
‚îÇ   ‚îú‚îÄ‚îÄ navigation/
‚îÇ   ‚îú‚îÄ‚îÄ screens/
‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îú‚îÄ‚îÄ ARQUITECTURA.md      # Visi√≥n general
‚îî‚îÄ‚îÄ RECOMENDACIONES.md   # Mejores pr√°cticas
```

### üîë Conceptos Clave

#### ConfigContext (üåü M√ÅS IMPORTANTE)
```javascript
// Ubicaci√≥n: frontend/contexts/ConfigContext.js
// Prop√≥sito: Sincronizar configuraci√≥n del negocio
// Contiene: modules activos, colores, settings, etc.
// Se recarga cuando: usuario cambia ajustes en SettingsScreen
// Responsable de: DynamicNavigator sepa qu√© pantallas mostrar

useConfig() retorna:
{
  config: { business, settings, modules, enabledModules },
  loading: boolean,
  error: string,
  isModuleActive: (code) => boolean,
  reloadConfig: () => Promise
}
```

#### DynamicNavigator (üåü MUY IMPORTANTE)
```javascript
// Ubicaci√≥n: frontend/navigation/DynamicNavigator.js
// Prop√≥sito: Mostrar solo m√≥dulos activos
// L√≥gica: Filtra MODULE_SCREENS seg√∫n config.enabledModules
// Re-renderiza cuando: ConfigContext cambia
// Resultado: Bottom tab navigation adaptativa
```

#### InventoryService (üåü CR√çTICO)
```javascript
// Ubicaci√≥n: backend/services/inventoryService.js
// Prop√≥sito: Actualizar stock con transacciones
// M√©todos principales:
//   - updateStockAfterSale(saleItems, userId)
//   - addStock(productId, quantity, userId)
//   - getLowStockProducts(businessId)
//   - getWeeklyInventoryReport(businessId)
// Garantiza: Transacciones ACID, sin stock negativo
```

### üîê Reglas de Seguridad (CR√çTICAS)

#### 1. Validaci√≥n en Backend
- SIEMPRE validar tipos de datos en backend
- NUNCA confiar en req.body.businessId
- Usar businessId del JWT token: req.user.businessId

#### 2. Filtrado por Business
- Cada query SQL DEBE tener `WHERE business_id = $1`
- No hacer filtrado en frontend
- √çndice: CREATE INDEX idx_business ON tabla(business_id)

#### 3. Autenticaci√≥n
- Token en Authorization header: "Bearer {token}"
- Expiraci√≥n: 7 d√≠as
- Renovaci√≥n: autom√°tica al login

#### 4. Base de Datos
- Foreign keys con ON DELETE CASCADE
- Transacciones para operaciones multi-tabla
- Rollback autom√°tico en error

### üìä Flujos Principales

#### Flujo 1: Cambio de M√≥dulos en Tiempo Real
```
1. Usuario en SettingsScreen activa/desactiva m√≥dulo
2. POST /api/config/toggle-module env√≠a cambio
3. Backend actualiza business_modules en BD
4. SettingsScreen llama reloadConfig()
5. ConfigContext obtiene nueva config del API
6. DynamicNavigator se re-renderiza
7. App muestra/oculta pantallas seg√∫n m√≥dulos
```

#### Flujo 2: Registro de Venta
```
1. Usuario en QuickSaleScreen agrega productos
2. POST /api/sales env√≠a carrito
3. Backend crea sale + sale_items en transacci√≥n
4. inventoryService.updateStockAfterSale() reduce stock
5. inventory_movements registra cada cambio
6. Frontend recibe confirmaci√≥n
7. App actualiza InventoryScreen (si est√° abierto)
```

#### Flujo 3: Inicializaci√≥n de App
```
1. App.js verifica token en AsyncStorage
2. Si existe ‚Üí ConfigProvider carga config del API
3. ConfigContext obtiene /api/config/business-config
4. DynamicNavigator renderiza m√≥dulos activos
5. Si no existe ‚Üí muestra LoginScreen
```

### üéØ Cuando Escribir C√≥digo

#### En Backend (routes, services)
```javascript
// Patr√≥n para TODA ruta protegida:
router.post('/endpoint', authenticateToken, checkPermission(['owner', 'admin']), async (req, res) => {
  try {
    // 1. Validar input
    // 2. Filtrar por business_id del token
    // 3. Hacer cambios en BD
    // 4. Retornar resultado
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
```

#### En Frontend (screens, components)
```javascript
// Patr√≥n para TODA pantalla:
export default function ScreenName({ navigation }) {
  const { config, isModuleActive } = useConfig();
  const [state, setState] = useState(null);
  const [loading, setLoading] = useState(false);

  // Verificar que m√≥dulo est√° activo
  if (!isModuleActive('module_code')) {
    return <Text>M√≥dulo no disponible</Text>;
  }

  // Resto del c√≥digo
}
```

### üóÑÔ∏è Tablas Principales de BD

#### business_modules (‚≠ê CENTRAL)
```sql
- business_id: ID del negocio
- module_id: ID del m√≥dulo
- is_active: true/false (determina si se muestra en app)
- custom_settings: JSONB con configuraci√≥n del m√≥dulo
```

#### business_settings (‚≠ê CONFIGURACI√ìN)
```sql
- business_id: ID del negocio
- business_type_id: Tipo (restaurant, bakery, etc.)
- primary_color, secondary_color: Tema de la app
- enable_tax, tax_rate: Impuestos
- table_count, enable_delivery, enable_loyalty_points: Features
```

#### inventory_movements (üîç AUDITOR√çA)
```sql
- product_id: Producto
- user_id: Usuario que hizo el cambio
- movement_type: 'sale', 'entry', 'adjustment', 'return'
- quantity, previous_stock, new_stock: Cambio
- reference_id: ID de la venta relacionada
- created_at: Cu√°ndo pas√≥
```

### üåê Endpoints API (Existentes)

#### Configuraci√≥n
```
GET  /api/config/business-config       ‚Üí Obtener config completa ‚≠ê
GET  /api/config/business-types        ‚Üí Tipos de negocio
POST /api/config/toggle-module         ‚Üí Cambiar m√≥dulo ‚≠ê
PUT  /api/config/business-settings     ‚Üí Actualizar settings
```

#### Salud
```
GET  /api/health                       ‚Üí Estado del servidor
GET  /api/version                      ‚Üí Versi√≥n del API
```

### üìù Convenciones de C√≥digo

#### Nombres
- Componentes React: PascalCase (QuickSaleScreen.js)
- Servicios: camelCase (inventoryService.js)
- Constantes: UPPER_SNAKE_CASE (MAX_STOCK_ALERT)
- Hooks: useHookName (useConfig.js)
- Funciones async: nombreAccion (updateStockAfterSale)

#### Documentaci√≥n
- Cada pantalla: JSDoc header con descripci√≥n, props, estado, flujo
- Cada servicio: JSDoc header con m√©todos y transacciones
- Cada ruta: qu√© hace, qu√© valida, qu√© retorna

#### Errores
- Backend: res.status(code).json({ error: 'mensaje' })
- Frontend: Alert.alert('T√≠tulo', 'mensaje de error')
- Logs: console.error('Contexto:', error)

### üöÄ Tipos de Negocio y M√≥dulos

#### Restaurante (‚ú® Completo)
- quick_sale, inventory, tables, orders, waiters
- delivery, kitchen_display, loyalty_program
- sales_reports, employee_performance

#### Poller√≠a (Simple)
- quick_sale, inventory, delivery, customers
- sales_reports (delivery es opcional)

#### Panader√≠a (Producci√≥n)
- quick_sale, inventory, production, recipes
- customers, sales_reports, inventory_reports

#### Taquer√≠a (Flexible)
- quick_sale, inventory, (tables opcional)
- delivery, customers, sales_reports

#### Otros: Carnicer√≠a, Helader√≠a, Tamalera, Abarrotes, Farmacia, Boutique

### üîß Comandos √ötiles

#### Backend
```bash
npm run dev                    # Desarrollo con nodemon
npm start                      # Producci√≥n
npm run db:migrate             # Crear tablas
npm run db:seed               # Cargar datos iniciales
```

#### Frontend
```bash
npx expo start                # Desarrollo
npx expo start --clear        # Limpiar cach√©
npm run lint                  # Verificar errores
```

#### VPS Hostinger
```bash
pm2 start server.js           # Iniciar
pm2 logs business-api         # Ver logs
pm2 restart business-api      # Reiniciar
```

### üìö Archivos Clave a Consultar

1. **ARQUITECTURA.md** - Visi√≥n general del sistema
2. **RECOMENDACIONES.md** - Mejores pr√°cticas detalladas
3. **backend/README.md** - Instrucciones VPS
4. **frontend/SETUP_REACT_NATIVE.md** - Setup React Native

### ‚ö° Lo M√°s Importante (Memorizar)

1. **ConfigContext** es el coraz√≥n ‚Üí recarga cuando cambian m√≥dulos
2. **business_id** siempre en WHERE ‚Üí seguridad
3. **Inventario** con transacciones ‚Üí rollback si falla
4. **M√≥dulos din√°micos** ‚Üí no cargar si est√°n desactivados
5. **Validaci√≥n en backend** ‚Üí nunca confiar en frontend

### üéì Para Que Copilot Genere Mejor C√≥digo

Cuando Copilot genere c√≥digo, deber√≠a:
1. Incluir JSDoc headers
2. Validar inputs en backend
3. Filtrar por business_id
4. Usar transacciones para m√∫ltiples cambios
5. Manejo de errores estructurado
6. Verificar m√≥dulo activo en frontend
7. Usar ConfigContext para estado global
8. Comentarios explicativos donde sea confuso

---

**√öltima actualizaci√≥n**: 2025-10-29
**Versi√≥n**: 1.0.0
